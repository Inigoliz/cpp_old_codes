/*resolucion de Sistemas No Lineales por Newton Raphson*/


void newtonraphson(matrix<double>(*f)(matrix<double>, int), matrix<double>(*jacobiano)(matrix<double>, int), matrix<double> X0, matrix<double> &X, double eps, int dim, int &ite){
  
  /* f = (f1(x),...,fn(x))
     jacobiano = (j11(x),...,j1n(x);...;jn1(x),...,jnn(x))
     X0: punto de partida
     X: vector del programa principal donde se guarda la solucion
     eps: precision
     dim: dimension de las matrices (incognitas)
     ite: iteraciones
  */

  matrix<double> F(dim,1); // vector que guarda los valores de (f1(X0),...,fn(X0)
  matrix<double> J(dim,dim); // matriz que guarda los valores del jacobiano evaluado en X0
  double det = 0;

  X = X0;

  J = jacobiano(X0,dim);
  det = J.Det();

  if(det<1e-10){
    cout<<"JACOBIANO = 0; ELEGIR OTRO PUNTO DE PARTIDA"<<endl;
  }
  else{
    do{
      X0 = X;
      F = f(X0,dim);
      J = jacobiano(X0,dim);
      X = X0-(!J)*F;
      ite++;
      J = jacobiano(X,dim);
      det = J.Det();
    }
    while(((X-X0).Norm()>eps)&&(det<1e-10)); // cuando sea muuuy pequeÃ±o. por calculo numerico, puede que no sea 0, aunque debiera serlo
  }

}
